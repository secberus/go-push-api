// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	v1 "github.com/secberus/go-push-api/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushServiceClient interface {
	CreateTable(ctx context.Context, in *v1.CreateTableInput, opts ...grpc.CallOption) (*v1.CreateTableOutput, error)
	DropTable(ctx context.Context, in *v1.DropTableInput, opts ...grpc.CallOption) (*v1.DropTableOutput, error)
	AlterTable(ctx context.Context, in *v1.AlterTableInput, opts ...grpc.CallOption) (*v1.AlterTableOutput, error)
	TruncateTable(ctx context.Context, in *v1.TruncateTableInput, opts ...grpc.CallOption) (*v1.TruncateTableOutput, error)
	GetTable(ctx context.Context, in *v1.GetTableInput, opts ...grpc.CallOption) (*v1.GetTableOutput, error)
	ListTables(ctx context.Context, in *v1.ListTablesInput, opts ...grpc.CallOption) (PushService_ListTablesClient, error)
	CreateIndex(ctx context.Context, in *v1.CreateIndexInput, opts ...grpc.CallOption) (*v1.CreateIndexOutput, error)
	DropIndex(ctx context.Context, in *v1.DropIndexInput, opts ...grpc.CallOption) (*v1.DropIndexOutput, error)
	AlterIndex(ctx context.Context, in *v1.AlterIndexInput, opts ...grpc.CallOption) (*v1.AlterIndexOutput, error)
	GetIndex(ctx context.Context, in *v1.GetIndexInput, opts ...grpc.CallOption) (*v1.GetIndexOutput, error)
	ListIndexes(ctx context.Context, in *v1.ListIndexesInput, opts ...grpc.CallOption) (PushService_ListIndexesClient, error)
	UpsertRecords(ctx context.Context, in *v1.UpsertRecordsInput, opts ...grpc.CallOption) (*v1.UpsertRecordsOutput, error)
	DeleteRecords(ctx context.Context, in *v1.DeleteRecordsInput, opts ...grpc.CallOption) (*v1.DeleteRecordsOutput, error)
	SyncData(ctx context.Context, opts ...grpc.CallOption) (PushService_SyncDataClient, error)
}

type pushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServiceClient(cc grpc.ClientConnInterface) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) CreateTable(ctx context.Context, in *v1.CreateTableInput, opts ...grpc.CallOption) (*v1.CreateTableOutput, error) {
	out := new(v1.CreateTableOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) DropTable(ctx context.Context, in *v1.DropTableInput, opts ...grpc.CallOption) (*v1.DropTableOutput, error) {
	out := new(v1.DropTableOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/DropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) AlterTable(ctx context.Context, in *v1.AlterTableInput, opts ...grpc.CallOption) (*v1.AlterTableOutput, error) {
	out := new(v1.AlterTableOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/AlterTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) TruncateTable(ctx context.Context, in *v1.TruncateTableInput, opts ...grpc.CallOption) (*v1.TruncateTableOutput, error) {
	out := new(v1.TruncateTableOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/TruncateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) GetTable(ctx context.Context, in *v1.GetTableInput, opts ...grpc.CallOption) (*v1.GetTableOutput, error) {
	out := new(v1.GetTableOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/GetTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) ListTables(ctx context.Context, in *v1.ListTablesInput, opts ...grpc.CallOption) (PushService_ListTablesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushService_serviceDesc.Streams[0], "/service.v1.push.PushService/ListTables", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushServiceListTablesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushService_ListTablesClient interface {
	Recv() (*v1.ListTablesOutput, error)
	grpc.ClientStream
}

type pushServiceListTablesClient struct {
	grpc.ClientStream
}

func (x *pushServiceListTablesClient) Recv() (*v1.ListTablesOutput, error) {
	m := new(v1.ListTablesOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pushServiceClient) CreateIndex(ctx context.Context, in *v1.CreateIndexInput, opts ...grpc.CallOption) (*v1.CreateIndexOutput, error) {
	out := new(v1.CreateIndexOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) DropIndex(ctx context.Context, in *v1.DropIndexInput, opts ...grpc.CallOption) (*v1.DropIndexOutput, error) {
	out := new(v1.DropIndexOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) AlterIndex(ctx context.Context, in *v1.AlterIndexInput, opts ...grpc.CallOption) (*v1.AlterIndexOutput, error) {
	out := new(v1.AlterIndexOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/AlterIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) GetIndex(ctx context.Context, in *v1.GetIndexInput, opts ...grpc.CallOption) (*v1.GetIndexOutput, error) {
	out := new(v1.GetIndexOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/GetIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) ListIndexes(ctx context.Context, in *v1.ListIndexesInput, opts ...grpc.CallOption) (PushService_ListIndexesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushService_serviceDesc.Streams[1], "/service.v1.push.PushService/ListIndexes", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushServiceListIndexesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushService_ListIndexesClient interface {
	Recv() (*v1.ListIndexesOutput, error)
	grpc.ClientStream
}

type pushServiceListIndexesClient struct {
	grpc.ClientStream
}

func (x *pushServiceListIndexesClient) Recv() (*v1.ListIndexesOutput, error) {
	m := new(v1.ListIndexesOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pushServiceClient) UpsertRecords(ctx context.Context, in *v1.UpsertRecordsInput, opts ...grpc.CallOption) (*v1.UpsertRecordsOutput, error) {
	out := new(v1.UpsertRecordsOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/UpsertRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) DeleteRecords(ctx context.Context, in *v1.DeleteRecordsInput, opts ...grpc.CallOption) (*v1.DeleteRecordsOutput, error) {
	out := new(v1.DeleteRecordsOutput)
	err := c.cc.Invoke(ctx, "/service.v1.push.PushService/DeleteRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) SyncData(ctx context.Context, opts ...grpc.CallOption) (PushService_SyncDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushService_serviceDesc.Streams[2], "/service.v1.push.PushService/SyncData", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushServiceSyncDataClient{stream}
	return x, nil
}

type PushService_SyncDataClient interface {
	Send(*v1.SyncDataInput) error
	Recv() (*v1.SyncDataOutput, error)
	grpc.ClientStream
}

type pushServiceSyncDataClient struct {
	grpc.ClientStream
}

func (x *pushServiceSyncDataClient) Send(m *v1.SyncDataInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushServiceSyncDataClient) Recv() (*v1.SyncDataOutput, error) {
	m := new(v1.SyncDataOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushServiceServer is the server API for PushService service.
// All implementations must embed UnimplementedPushServiceServer
// for forward compatibility
type PushServiceServer interface {
	CreateTable(context.Context, *v1.CreateTableInput) (*v1.CreateTableOutput, error)
	DropTable(context.Context, *v1.DropTableInput) (*v1.DropTableOutput, error)
	AlterTable(context.Context, *v1.AlterTableInput) (*v1.AlterTableOutput, error)
	TruncateTable(context.Context, *v1.TruncateTableInput) (*v1.TruncateTableOutput, error)
	GetTable(context.Context, *v1.GetTableInput) (*v1.GetTableOutput, error)
	ListTables(*v1.ListTablesInput, PushService_ListTablesServer) error
	CreateIndex(context.Context, *v1.CreateIndexInput) (*v1.CreateIndexOutput, error)
	DropIndex(context.Context, *v1.DropIndexInput) (*v1.DropIndexOutput, error)
	AlterIndex(context.Context, *v1.AlterIndexInput) (*v1.AlterIndexOutput, error)
	GetIndex(context.Context, *v1.GetIndexInput) (*v1.GetIndexOutput, error)
	ListIndexes(*v1.ListIndexesInput, PushService_ListIndexesServer) error
	UpsertRecords(context.Context, *v1.UpsertRecordsInput) (*v1.UpsertRecordsOutput, error)
	DeleteRecords(context.Context, *v1.DeleteRecordsInput) (*v1.DeleteRecordsOutput, error)
	SyncData(PushService_SyncDataServer) error
	mustEmbedUnimplementedPushServiceServer()
}

// UnimplementedPushServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushServiceServer struct {
}

func (UnimplementedPushServiceServer) CreateTable(context.Context, *v1.CreateTableInput) (*v1.CreateTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedPushServiceServer) DropTable(context.Context, *v1.DropTableInput) (*v1.DropTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedPushServiceServer) AlterTable(context.Context, *v1.AlterTableInput) (*v1.AlterTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTable not implemented")
}
func (UnimplementedPushServiceServer) TruncateTable(context.Context, *v1.TruncateTableInput) (*v1.TruncateTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateTable not implemented")
}
func (UnimplementedPushServiceServer) GetTable(context.Context, *v1.GetTableInput) (*v1.GetTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedPushServiceServer) ListTables(*v1.ListTablesInput, PushService_ListTablesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedPushServiceServer) CreateIndex(context.Context, *v1.CreateIndexInput) (*v1.CreateIndexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedPushServiceServer) DropIndex(context.Context, *v1.DropIndexInput) (*v1.DropIndexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedPushServiceServer) AlterIndex(context.Context, *v1.AlterIndexInput) (*v1.AlterIndexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterIndex not implemented")
}
func (UnimplementedPushServiceServer) GetIndex(context.Context, *v1.GetIndexInput) (*v1.GetIndexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndex not implemented")
}
func (UnimplementedPushServiceServer) ListIndexes(*v1.ListIndexesInput, PushService_ListIndexesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}
func (UnimplementedPushServiceServer) UpsertRecords(context.Context, *v1.UpsertRecordsInput) (*v1.UpsertRecordsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRecords not implemented")
}
func (UnimplementedPushServiceServer) DeleteRecords(context.Context, *v1.DeleteRecordsInput) (*v1.DeleteRecordsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecords not implemented")
}
func (UnimplementedPushServiceServer) SyncData(PushService_SyncDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncData not implemented")
}
func (UnimplementedPushServiceServer) mustEmbedUnimplementedPushServiceServer() {}

// UnsafePushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServiceServer will
// result in compilation errors.
type UnsafePushServiceServer interface {
	mustEmbedUnimplementedPushServiceServer()
}

func RegisterPushServiceServer(s *grpc.Server, srv PushServiceServer) {
	s.RegisterService(&_PushService_serviceDesc, srv)
}

func _PushService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).CreateTable(ctx, req.(*v1.CreateTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DropTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).DropTable(ctx, req.(*v1.DropTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_AlterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AlterTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).AlterTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/AlterTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).AlterTable(ctx, req.(*v1.AlterTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_TruncateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.TruncateTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).TruncateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/TruncateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).TruncateTable(ctx, req.(*v1.TruncateTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).GetTable(ctx, req.(*v1.GetTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_ListTables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.ListTablesInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushServiceServer).ListTables(m, &pushServiceListTablesServer{stream})
}

type PushService_ListTablesServer interface {
	Send(*v1.ListTablesOutput) error
	grpc.ServerStream
}

type pushServiceListTablesServer struct {
	grpc.ServerStream
}

func (x *pushServiceListTablesServer) Send(m *v1.ListTablesOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _PushService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateIndexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).CreateIndex(ctx, req.(*v1.CreateIndexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DropIndexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).DropIndex(ctx, req.(*v1.DropIndexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_AlterIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AlterIndexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).AlterIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/AlterIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).AlterIndex(ctx, req.(*v1.AlterIndexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetIndexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/GetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).GetIndex(ctx, req.(*v1.GetIndexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_ListIndexes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.ListIndexesInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushServiceServer).ListIndexes(m, &pushServiceListIndexesServer{stream})
}

type PushService_ListIndexesServer interface {
	Send(*v1.ListIndexesOutput) error
	grpc.ServerStream
}

type pushServiceListIndexesServer struct {
	grpc.ServerStream
}

func (x *pushServiceListIndexesServer) Send(m *v1.ListIndexesOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _PushService_UpsertRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpsertRecordsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).UpsertRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/UpsertRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).UpsertRecords(ctx, req.(*v1.UpsertRecordsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_DeleteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteRecordsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).DeleteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.push.PushService/DeleteRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).DeleteRecords(ctx, req.(*v1.DeleteRecordsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_SyncData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushServiceServer).SyncData(&pushServiceSyncDataServer{stream})
}

type PushService_SyncDataServer interface {
	Send(*v1.SyncDataOutput) error
	Recv() (*v1.SyncDataInput, error)
	grpc.ServerStream
}

type pushServiceSyncDataServer struct {
	grpc.ServerStream
}

func (x *pushServiceSyncDataServer) Send(m *v1.SyncDataOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushServiceSyncDataServer) Recv() (*v1.SyncDataInput, error) {
	m := new(v1.SyncDataInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PushService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.push.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _PushService_CreateTable_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _PushService_DropTable_Handler,
		},
		{
			MethodName: "AlterTable",
			Handler:    _PushService_AlterTable_Handler,
		},
		{
			MethodName: "TruncateTable",
			Handler:    _PushService_TruncateTable_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _PushService_GetTable_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _PushService_CreateIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _PushService_DropIndex_Handler,
		},
		{
			MethodName: "AlterIndex",
			Handler:    _PushService_AlterIndex_Handler,
		},
		{
			MethodName: "GetIndex",
			Handler:    _PushService_GetIndex_Handler,
		},
		{
			MethodName: "UpsertRecords",
			Handler:    _PushService_UpsertRecords_Handler,
		},
		{
			MethodName: "DeleteRecords",
			Handler:    _PushService_DeleteRecords_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTables",
			Handler:       _PushService_ListTables_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListIndexes",
			Handler:       _PushService_ListIndexes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncData",
			Handler:       _PushService_SyncData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/v1/push/service.proto",
}
