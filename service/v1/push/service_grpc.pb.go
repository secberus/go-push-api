//
// Copyright 2018-2025 Secberus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service/v1/push/service.proto

package service

import (
	context "context"
	v1 "github.com/secberus/go-push-api/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PushService_CreateTable_FullMethodName   = "/service.v1.push.PushService/CreateTable"
	PushService_DropTable_FullMethodName     = "/service.v1.push.PushService/DropTable"
	PushService_AlterTable_FullMethodName    = "/service.v1.push.PushService/AlterTable"
	PushService_TruncateTable_FullMethodName = "/service.v1.push.PushService/TruncateTable"
	PushService_GetTable_FullMethodName      = "/service.v1.push.PushService/GetTable"
	PushService_ListTables_FullMethodName    = "/service.v1.push.PushService/ListTables"
	PushService_CreateIndex_FullMethodName   = "/service.v1.push.PushService/CreateIndex"
	PushService_DropIndex_FullMethodName     = "/service.v1.push.PushService/DropIndex"
	PushService_AlterIndex_FullMethodName    = "/service.v1.push.PushService/AlterIndex"
	PushService_GetIndex_FullMethodName      = "/service.v1.push.PushService/GetIndex"
	PushService_ListIndexes_FullMethodName   = "/service.v1.push.PushService/ListIndexes"
	PushService_UpsertRecords_FullMethodName = "/service.v1.push.PushService/UpsertRecords"
	PushService_DeleteRecords_FullMethodName = "/service.v1.push.PushService/DeleteRecords"
	PushService_SyncData_FullMethodName      = "/service.v1.push.PushService/SyncData"
)

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushServiceClient interface {
	CreateTable(ctx context.Context, in *v1.CreateTableInput, opts ...grpc.CallOption) (*v1.CreateTableOutput, error)
	DropTable(ctx context.Context, in *v1.DropTableInput, opts ...grpc.CallOption) (*v1.DropTableOutput, error)
	AlterTable(ctx context.Context, in *v1.AlterTableInput, opts ...grpc.CallOption) (*v1.AlterTableOutput, error)
	TruncateTable(ctx context.Context, in *v1.TruncateTableInput, opts ...grpc.CallOption) (*v1.TruncateTableOutput, error)
	GetTable(ctx context.Context, in *v1.GetTableInput, opts ...grpc.CallOption) (*v1.GetTableOutput, error)
	ListTables(ctx context.Context, in *v1.ListTablesInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.ListTablesOutput], error)
	CreateIndex(ctx context.Context, in *v1.CreateIndexInput, opts ...grpc.CallOption) (*v1.CreateIndexOutput, error)
	DropIndex(ctx context.Context, in *v1.DropIndexInput, opts ...grpc.CallOption) (*v1.DropIndexOutput, error)
	AlterIndex(ctx context.Context, in *v1.AlterIndexInput, opts ...grpc.CallOption) (*v1.AlterIndexOutput, error)
	GetIndex(ctx context.Context, in *v1.GetIndexInput, opts ...grpc.CallOption) (*v1.GetIndexOutput, error)
	ListIndexes(ctx context.Context, in *v1.ListIndexesInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.ListIndexesOutput], error)
	UpsertRecords(ctx context.Context, in *v1.UpsertRecordsInput, opts ...grpc.CallOption) (*v1.UpsertRecordsOutput, error)
	DeleteRecords(ctx context.Context, in *v1.DeleteRecordsInput, opts ...grpc.CallOption) (*v1.DeleteRecordsOutput, error)
	SyncData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v1.SyncDataInput, v1.SyncDataOutput], error)
}

type pushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServiceClient(cc grpc.ClientConnInterface) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) CreateTable(ctx context.Context, in *v1.CreateTableInput, opts ...grpc.CallOption) (*v1.CreateTableOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateTableOutput)
	err := c.cc.Invoke(ctx, PushService_CreateTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) DropTable(ctx context.Context, in *v1.DropTableInput, opts ...grpc.CallOption) (*v1.DropTableOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DropTableOutput)
	err := c.cc.Invoke(ctx, PushService_DropTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) AlterTable(ctx context.Context, in *v1.AlterTableInput, opts ...grpc.CallOption) (*v1.AlterTableOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AlterTableOutput)
	err := c.cc.Invoke(ctx, PushService_AlterTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) TruncateTable(ctx context.Context, in *v1.TruncateTableInput, opts ...grpc.CallOption) (*v1.TruncateTableOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.TruncateTableOutput)
	err := c.cc.Invoke(ctx, PushService_TruncateTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) GetTable(ctx context.Context, in *v1.GetTableInput, opts ...grpc.CallOption) (*v1.GetTableOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetTableOutput)
	err := c.cc.Invoke(ctx, PushService_GetTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) ListTables(ctx context.Context, in *v1.ListTablesInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.ListTablesOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PushService_ServiceDesc.Streams[0], PushService_ListTables_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v1.ListTablesInput, v1.ListTablesOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushService_ListTablesClient = grpc.ServerStreamingClient[v1.ListTablesOutput]

func (c *pushServiceClient) CreateIndex(ctx context.Context, in *v1.CreateIndexInput, opts ...grpc.CallOption) (*v1.CreateIndexOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateIndexOutput)
	err := c.cc.Invoke(ctx, PushService_CreateIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) DropIndex(ctx context.Context, in *v1.DropIndexInput, opts ...grpc.CallOption) (*v1.DropIndexOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DropIndexOutput)
	err := c.cc.Invoke(ctx, PushService_DropIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) AlterIndex(ctx context.Context, in *v1.AlterIndexInput, opts ...grpc.CallOption) (*v1.AlterIndexOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AlterIndexOutput)
	err := c.cc.Invoke(ctx, PushService_AlterIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) GetIndex(ctx context.Context, in *v1.GetIndexInput, opts ...grpc.CallOption) (*v1.GetIndexOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetIndexOutput)
	err := c.cc.Invoke(ctx, PushService_GetIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) ListIndexes(ctx context.Context, in *v1.ListIndexesInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.ListIndexesOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PushService_ServiceDesc.Streams[1], PushService_ListIndexes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v1.ListIndexesInput, v1.ListIndexesOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushService_ListIndexesClient = grpc.ServerStreamingClient[v1.ListIndexesOutput]

func (c *pushServiceClient) UpsertRecords(ctx context.Context, in *v1.UpsertRecordsInput, opts ...grpc.CallOption) (*v1.UpsertRecordsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpsertRecordsOutput)
	err := c.cc.Invoke(ctx, PushService_UpsertRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) DeleteRecords(ctx context.Context, in *v1.DeleteRecordsInput, opts ...grpc.CallOption) (*v1.DeleteRecordsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteRecordsOutput)
	err := c.cc.Invoke(ctx, PushService_DeleteRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) SyncData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v1.SyncDataInput, v1.SyncDataOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PushService_ServiceDesc.Streams[2], PushService_SyncData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v1.SyncDataInput, v1.SyncDataOutput]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushService_SyncDataClient = grpc.BidiStreamingClient[v1.SyncDataInput, v1.SyncDataOutput]

// PushServiceServer is the server API for PushService service.
// All implementations must embed UnimplementedPushServiceServer
// for forward compatibility.
type PushServiceServer interface {
	CreateTable(context.Context, *v1.CreateTableInput) (*v1.CreateTableOutput, error)
	DropTable(context.Context, *v1.DropTableInput) (*v1.DropTableOutput, error)
	AlterTable(context.Context, *v1.AlterTableInput) (*v1.AlterTableOutput, error)
	TruncateTable(context.Context, *v1.TruncateTableInput) (*v1.TruncateTableOutput, error)
	GetTable(context.Context, *v1.GetTableInput) (*v1.GetTableOutput, error)
	ListTables(*v1.ListTablesInput, grpc.ServerStreamingServer[v1.ListTablesOutput]) error
	CreateIndex(context.Context, *v1.CreateIndexInput) (*v1.CreateIndexOutput, error)
	DropIndex(context.Context, *v1.DropIndexInput) (*v1.DropIndexOutput, error)
	AlterIndex(context.Context, *v1.AlterIndexInput) (*v1.AlterIndexOutput, error)
	GetIndex(context.Context, *v1.GetIndexInput) (*v1.GetIndexOutput, error)
	ListIndexes(*v1.ListIndexesInput, grpc.ServerStreamingServer[v1.ListIndexesOutput]) error
	UpsertRecords(context.Context, *v1.UpsertRecordsInput) (*v1.UpsertRecordsOutput, error)
	DeleteRecords(context.Context, *v1.DeleteRecordsInput) (*v1.DeleteRecordsOutput, error)
	SyncData(grpc.BidiStreamingServer[v1.SyncDataInput, v1.SyncDataOutput]) error
	mustEmbedUnimplementedPushServiceServer()
}

// UnimplementedPushServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPushServiceServer struct{}

func (UnimplementedPushServiceServer) CreateTable(context.Context, *v1.CreateTableInput) (*v1.CreateTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedPushServiceServer) DropTable(context.Context, *v1.DropTableInput) (*v1.DropTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedPushServiceServer) AlterTable(context.Context, *v1.AlterTableInput) (*v1.AlterTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTable not implemented")
}
func (UnimplementedPushServiceServer) TruncateTable(context.Context, *v1.TruncateTableInput) (*v1.TruncateTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateTable not implemented")
}
func (UnimplementedPushServiceServer) GetTable(context.Context, *v1.GetTableInput) (*v1.GetTableOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedPushServiceServer) ListTables(*v1.ListTablesInput, grpc.ServerStreamingServer[v1.ListTablesOutput]) error {
	return status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedPushServiceServer) CreateIndex(context.Context, *v1.CreateIndexInput) (*v1.CreateIndexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedPushServiceServer) DropIndex(context.Context, *v1.DropIndexInput) (*v1.DropIndexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedPushServiceServer) AlterIndex(context.Context, *v1.AlterIndexInput) (*v1.AlterIndexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterIndex not implemented")
}
func (UnimplementedPushServiceServer) GetIndex(context.Context, *v1.GetIndexInput) (*v1.GetIndexOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndex not implemented")
}
func (UnimplementedPushServiceServer) ListIndexes(*v1.ListIndexesInput, grpc.ServerStreamingServer[v1.ListIndexesOutput]) error {
	return status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}
func (UnimplementedPushServiceServer) UpsertRecords(context.Context, *v1.UpsertRecordsInput) (*v1.UpsertRecordsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRecords not implemented")
}
func (UnimplementedPushServiceServer) DeleteRecords(context.Context, *v1.DeleteRecordsInput) (*v1.DeleteRecordsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecords not implemented")
}
func (UnimplementedPushServiceServer) SyncData(grpc.BidiStreamingServer[v1.SyncDataInput, v1.SyncDataOutput]) error {
	return status.Errorf(codes.Unimplemented, "method SyncData not implemented")
}
func (UnimplementedPushServiceServer) mustEmbedUnimplementedPushServiceServer() {}
func (UnimplementedPushServiceServer) testEmbeddedByValue()                     {}

// UnsafePushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServiceServer will
// result in compilation errors.
type UnsafePushServiceServer interface {
	mustEmbedUnimplementedPushServiceServer()
}

func RegisterPushServiceServer(s grpc.ServiceRegistrar, srv PushServiceServer) {
	// If the following call pancis, it indicates UnimplementedPushServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PushService_ServiceDesc, srv)
}

func _PushService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).CreateTable(ctx, req.(*v1.CreateTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DropTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_DropTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).DropTable(ctx, req.(*v1.DropTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_AlterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AlterTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).AlterTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_AlterTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).AlterTable(ctx, req.(*v1.AlterTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_TruncateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.TruncateTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).TruncateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_TruncateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).TruncateTable(ctx, req.(*v1.TruncateTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetTableInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_GetTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).GetTable(ctx, req.(*v1.GetTableInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_ListTables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.ListTablesInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushServiceServer).ListTables(m, &grpc.GenericServerStream[v1.ListTablesInput, v1.ListTablesOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushService_ListTablesServer = grpc.ServerStreamingServer[v1.ListTablesOutput]

func _PushService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateIndexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).CreateIndex(ctx, req.(*v1.CreateIndexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DropIndexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_DropIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).DropIndex(ctx, req.(*v1.DropIndexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_AlterIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AlterIndexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).AlterIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_AlterIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).AlterIndex(ctx, req.(*v1.AlterIndexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetIndexInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_GetIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).GetIndex(ctx, req.(*v1.GetIndexInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_ListIndexes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.ListIndexesInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushServiceServer).ListIndexes(m, &grpc.GenericServerStream[v1.ListIndexesInput, v1.ListIndexesOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushService_ListIndexesServer = grpc.ServerStreamingServer[v1.ListIndexesOutput]

func _PushService_UpsertRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpsertRecordsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).UpsertRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_UpsertRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).UpsertRecords(ctx, req.(*v1.UpsertRecordsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_DeleteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteRecordsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).DeleteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_DeleteRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).DeleteRecords(ctx, req.(*v1.DeleteRecordsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_SyncData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushServiceServer).SyncData(&grpc.GenericServerStream[v1.SyncDataInput, v1.SyncDataOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushService_SyncDataServer = grpc.BidiStreamingServer[v1.SyncDataInput, v1.SyncDataOutput]

// PushService_ServiceDesc is the grpc.ServiceDesc for PushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.push.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _PushService_CreateTable_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _PushService_DropTable_Handler,
		},
		{
			MethodName: "AlterTable",
			Handler:    _PushService_AlterTable_Handler,
		},
		{
			MethodName: "TruncateTable",
			Handler:    _PushService_TruncateTable_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _PushService_GetTable_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _PushService_CreateIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _PushService_DropIndex_Handler,
		},
		{
			MethodName: "AlterIndex",
			Handler:    _PushService_AlterIndex_Handler,
		},
		{
			MethodName: "GetIndex",
			Handler:    _PushService_GetIndex_Handler,
		},
		{
			MethodName: "UpsertRecords",
			Handler:    _PushService_UpsertRecords_Handler,
		},
		{
			MethodName: "DeleteRecords",
			Handler:    _PushService_DeleteRecords_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTables",
			Handler:       _PushService_ListTables_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListIndexes",
			Handler:       _PushService_ListIndexes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncData",
			Handler:       _PushService_SyncData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/v1/push/service.proto",
}
